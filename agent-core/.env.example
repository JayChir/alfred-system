# Alfred Agent Core Environment Configuration
# Copy this file to .env and fill in your values
# Required fields are marked with [REQUIRED]

# ============================================
# APPLICATION SETTINGS
# ============================================

# Application environment: development, staging, production, test
APP_ENV=development

# Application name (used in logs and responses)
APP_NAME="Alfred Agent Core"

# Application version
APP_VERSION=0.1.0

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# ============================================
# API SECURITY
# ============================================

# [REQUIRED] API key for authenticating requests to this service
# Must be at least 32 characters long
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
API_KEY=your-secure-api-key-min-32-chars-long-replace-this

# Allowed CORS origins - supports two formats:
# Option 1: Comma-separated list (recommended for shells/Docker)
CORS_ORIGINS=http://localhost:3000,http://localhost:8080
# Option 2: JSON array (for complex deployments)
# CORS_ORIGINS=["http://localhost:3000","http://localhost:8080"]

# ============================================
# SERVER CONFIGURATION
# ============================================

# Host to bind the server to (0.0.0.0 for all interfaces)
HOST=0.0.0.0

# Port to bind the server to
PORT=8080

# ============================================
# ANTHROPIC CONFIGURATION
# ============================================

# [REQUIRED] Anthropic API key for Claude model access
# Get from: https://console.anthropic.com/account/keys
ANTHROPIC_API_KEY=sk-ant-api03-your-key-here

# Anthropic model to use
ANTHROPIC_MODEL=claude-3-5-sonnet-20241022

# Maximum tokens for Anthropic responses (1-8192)
ANTHROPIC_MAX_TOKENS=4096

# ============================================
# DATABASE CONFIGURATION (Week 3)
# ============================================

# PostgreSQL connection URL
# Format: postgresql://user:password@host:port/database
# DATABASE_URL=postgresql://alfred:password@localhost:5432/agent_core

# Database connection pool size (1-100)
DATABASE_POOL_SIZE=10

# Database connection pool timeout in seconds
DATABASE_POOL_TIMEOUT=30

# ============================================
# NOTION OAUTH CONFIGURATION (Week 2)
# ============================================

# Notion OAuth app credentials
# Get from: https://www.notion.so/my-integrations
# NOTION_CLIENT_ID=your-notion-client-id
# NOTION_CLIENT_SECRET=your-notion-client-secret

# Notion OAuth callback URL (must match app settings)
NOTION_REDIRECT_URI=http://localhost:8080/oauth/notion/callback

# ============================================
# SECURITY & ENCRYPTION
# ============================================

# Fernet encryption key for token storage
# Auto-generated if not provided, but should be persistent in production
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
# FERNET_KEY=your-fernet-key-here

# JWT secret for session tokens
# Auto-generated if not provided, but should be persistent in production
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
# JWT_SECRET=your-jwt-secret-here

# ============================================
# MCP (MODEL CONTEXT PROTOCOL) CONFIGURATION
# ============================================

# MCP tool call timeout in milliseconds (1000-120000)
MCP_TIMEOUT=30000

# MCP server URLs
MCP_NOTION_SERVER_URL=http://localhost:3001
MCP_GITHUB_SERVER_URL=http://localhost:3002

# Feature flag for Notion's hosted MCP service (Issue #17)
# When enabled, authenticated users get access to Notion tools via hosted MCP
FEATURE_NOTION_HOSTED_MCP=true

# ============================================
# CACHE CONFIGURATION
# ============================================

# Cache backend: memory (default) or postgres
CACHE_BACKEND=memory

# Default cache TTL in seconds (0 to disable)
CACHE_TTL_DEFAULT=3600  # 1 hour

# Tool-specific cache TTLs (overrides DEFAULT_TTL_POLICIES)
# Format: CACHE_TTL_{PROVIDER}_{TOOL}=seconds
CACHE_TTL_NOTION_GET_PAGE=14400    # 4 hours for documents
CACHE_TTL_NOTION_SEARCH=14400      # 4 hours for search
CACHE_TTL_NOTION_GET_DATABASE=86400  # 24 hours for schema
CACHE_TTL_GITHUB_GET_REPO=86400    # 24 hours for repo metadata
CACHE_TTL_GITHUB_GET_FILE=14400    # 4 hours for file content
CACHE_TTL_GITHUB_SEARCH=3600       # 1 hour for search

# Maximum cache entry size in KB (default: 250)
CACHE_MAX_ENTRY_SIZE_KB=250

# Cache cleanup interval in seconds (PostgreSQL only)
CACHE_CLEANUP_INTERVAL=300  # 5 minutes

# Cache cleanup batch size (PostgreSQL only)
CACHE_CLEANUP_BATCH_SIZE=1000

# ============================================
# RATE LIMITING (Week 4) - Production Ready
# ============================================

# Global enable/disable rate limiting
RATE_LIMITING_ENABLED=true

# Default limits (applied to routes without specific overrides)
RATE_LIMIT_DEFAULT_RPM=60           # Requests per minute
RATE_LIMIT_DEFAULT_BURST=10         # Burst capacity (leaky bucket size)

# DoS protection settings
RATE_LIMIT_MAX_BUCKETS=10000        # Maximum concurrent rate limit buckets
RATE_LIMIT_CLEANUP_INTERVAL=300     # Bucket cleanup interval in seconds

# Per-route overrides (JSON format for safety and structure)
# Format: {"route_path": {"requests_per_minute": 30, "burst_capacity": 5, "enabled": true}}
# Example: {"\/api\/v1\/chat": {"requests_per_minute": 30, "burst_capacity": 5}}
RATE_LIMIT_ROUTE_OVERRIDES={}

# Per-API-key overrides (JSON with hashed key prefixes)
# Get key prefix with: echo -n "your-api-key" | sha256sum | cut -c1-12
# Format: {"api:hash_prefix": {"requests_per_minute": 120, "burst_capacity": 20}}
# Example: {"api:abcd1234ef56": {"requests_per_minute": 120, "burst_capacity": 20}}
RATE_LIMIT_KEY_OVERRIDES={}

# Multi-process deployment considerations
# IMPORTANT: Rate limits are per-process! With WEB_CONCURRENCY > 1,
# effective limits multiply by worker count. Use Redis backend for distributed limits.
WEB_CONCURRENCY=1

# Future enhancement: Redis backend for distributed rate limiting
# RATE_LIMIT_BACKEND=memory          # Options: memory (current), redis (future)
# RATE_LIMIT_REDIS_URL=redis://localhost:6379/2

# ============================================
# PRODUCTION HARDENING (Issue #31)
# ============================================

# Timeout Configuration
REQUEST_TIMEOUT_SECONDS=30          # Max request processing time (excludes SSE)
KEEPALIVE_TIMEOUT_SECONDS=5         # HTTP keep-alive timeout
ANTHROPIC_TIMEOUT_SECONDS=60        # Anthropic API timeout
MCP_TIMEOUT_SECONDS=30              # MCP server timeout
SSE_MAX_DURATION_MINUTES=15         # Maximum SSE streaming duration

# Size Limits
MAX_REQUEST_SIZE_MB=10              # Max request body size in MB
MAX_CHAT_HISTORY_MESSAGES=100       # Max chat history length
MAX_MESSAGE_CONTENT_KB=100          # Max individual message size in KB
MAX_TOOL_ARGS_KB=50                 # Max tool arguments size in KB

# Enhanced CORS Configuration
CORS_ALLOW_CREDENTIALS=true         # Allow credentials in CORS requests
CORS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS  # Allowed HTTP methods
CORS_ALLOW_HEADERS=Content-Type,Authorization,X-Request-ID  # Never use * with credentials
CORS_MAX_AGE=86400                  # CORS preflight cache time

# Security Headers
SECURITY_HEADERS_ENABLED=true       # Enable security headers middleware
HSTS_ENABLED=false                  # Enable HSTS (only for HTTPS production)
CSP_ENABLED=true                    # Enable Content Security Policy
CSP_REPORT_ONLY=true               # CSP in report-only mode (recommended for initial deployment)

# Proxy Configuration
TRUSTED_HOSTS=*                     # Trusted hosts (use specific domains in production)
FORWARDED_ALLOW_IPS=127.0.0.1,::1  # IPs allowed to send proxy headers

# Development/Production Feature Flags
DEV_MODE_RELAXED_SECURITY=true      # Relax some security settings in development

# ============================================
# DOCKER-SPECIFIC OVERRIDES
# ============================================

# When running in Docker, you may need to override these:
# MCP_NOTION_SERVER_URL=http://host.docker.internal:3001
# MCP_GITHUB_SERVER_URL=http://host.docker.internal:3002
# DATABASE_URL=postgresql://alfred:password@db:5432/agent_core
