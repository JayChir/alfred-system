#!/bin/bash
# Setup environment variables for MCP servers that require API keys

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

ENV_FILE="$(dirname "$0")/.env"

echo -e "${GREEN}MCP Servers Environment Setup${NC}"
echo ""

# Note: No need to run as root since we're writing to repo directory

# Function to prompt for a value with masking
prompt_secret() {
    local prompt="$1"
    local var_name="$2"
    local current_value="$3"
    
    if [ -n "$current_value" ] && [ "$current_value" != "YOUR_TOKEN_HERE" ]; then
        echo -e "${YELLOW}$prompt${NC} [currently set, press Enter to keep]:"
    else
        echo -e "${YELLOW}$prompt${NC}:"
    fi
    
    read -s -r input
    echo ""  # New line after hidden input
    
    if [ -n "$input" ]; then
        echo "$var_name=\"$input\""
    elif [ -n "$current_value" ]; then
        echo "$var_name=\"$current_value\""
    else
        echo "# $var_name not set"
    fi
}

# Function to prompt for a regular value
prompt_value() {
    local prompt="$1"
    local var_name="$2"
    local default="$3"
    local current_value="$4"
    
    if [ -n "$current_value" ]; then
        echo -e "${YELLOW}$prompt${NC} [current: $current_value]:"
    elif [ -n "$default" ]; then
        echo -e "${YELLOW}$prompt${NC} [default: $default]:"
    else
        echo -e "${YELLOW}$prompt${NC}:"
    fi
    
    read -r input
    
    if [ -n "$input" ]; then
        echo "$var_name=\"$input\""
    elif [ -n "$current_value" ]; then
        echo "$var_name=\"$current_value\""
    elif [ -n "$default" ]; then
        echo "$var_name=\"$default\""
    else
        echo "# $var_name not set"
    fi
}

# Load existing values if file exists
if [ -f "$ENV_FILE" ]; then
    echo "Loading existing configuration..."
    source "$ENV_FILE"
fi

echo -e "${GREEN}GitHub Configuration${NC}"
echo "Create tokens at: https://github.com/settings/tokens"
echo "Required scopes: repo, read:org, gist"
echo ""
echo -e "${YELLOW}Enter your GitHub Personal Access Token:${NC}"
echo "(Note: Your input will be hidden for security)"
GITHUB_PERSONAL=$(prompt_secret "" "GITHUB_PERSONAL_ACCESS_TOKEN" "$GITHUB_PERSONAL_ACCESS_TOKEN")

echo ""
echo -e "${YELLOW}[Optional] Enter your GitHub Work Access Token:${NC}"
echo "(Press Enter to skip and use the same as personal)"
GITHUB_WORK=$(prompt_secret "" "GITHUB_WORK_ACCESS_TOKEN" "$GITHUB_WORK_ACCESS_TOKEN")

echo ""
echo -e "${GREEN}Notion Configuration${NC}"
echo "Create integration at: https://www.notion.so/my-integrations"
echo ""
echo -e "${YELLOW}Enter your Notion API Key:${NC}"
echo "(Starts with 'secret_')"
NOTION=$(prompt_secret "" "NOTION_API_KEY" "$NOTION_API_KEY")

echo ""
echo -e "${GREEN}Atlassian Configuration${NC}"
echo -e "${YELLOW}(Press Enter to skip all Atlassian config if not needed)${NC}"
echo "Create API token at: https://id.atlassian.com/manage-profile/security/api-tokens"
echo ""

echo -e "${YELLOW}[Optional] Enter Confluence URL:${NC}"
echo "(Example: https://company.atlassian.net/wiki/)"
CONF_URL=$(prompt_value "" "CONFLUENCE_URL" "https://company.atlassian.net/wiki/" "$CONFLUENCE_URL")

echo -e "${YELLOW}[Optional] Enter Confluence Username (email):${NC}"
CONF_USER=$(prompt_value "" "CONFLUENCE_USERNAME" "" "$CONFLUENCE_USERNAME")

echo -e "${YELLOW}[Optional] Enter Confluence API Token:${NC}"
CONF_TOKEN=$(prompt_secret "" "CONFLUENCE_API_TOKEN" "$CONFLUENCE_API_TOKEN")

echo -e "${YELLOW}[Optional] Enter JIRA URL:${NC}"
echo "(Example: https://company.atlassian.net/)"
JIRA_URL=$(prompt_value "" "JIRA_URL" "https://company.atlassian.net/" "$JIRA_URL")

echo -e "${YELLOW}[Optional] Enter JIRA Username (email):${NC}"
echo "(Press Enter to use same as Confluence)"
JIRA_USER=$(prompt_value "" "JIRA_USERNAME" "$CONFLUENCE_USERNAME" "$JIRA_USERNAME")

echo -e "${YELLOW}[Optional] Enter JIRA API Token:${NC}"
echo "(Press Enter to use same as Confluence)"
JIRA_TOKEN=$(prompt_secret "" "JIRA_API_TOKEN" "${CONFLUENCE_API_TOKEN:-$JIRA_API_TOKEN}")

# Write to environment file
echo ""
echo -e "${YELLOW}Writing configuration to $ENV_FILE...${NC}"

cat > "$ENV_FILE" << EOF
# MCP Servers Environment Variables
# Generated by setup-env.sh

$GITHUB_PERSONAL
$GITHUB_WORK

$NOTION

$CONF_URL
$CONF_USER
$CONF_TOKEN

$JIRA_URL
$JIRA_USER
$JIRA_TOKEN
EOF

# Set proper permissions
chmod 600 "$ENV_FILE"

# Ensure .env is gitignored
GITIGNORE="$(dirname "$0")/../.gitignore"
if ! grep -q "^mcp-servers/\.env$" "$GITIGNORE" 2>/dev/null; then
    echo "mcp-servers/.env" >> "$GITIGNORE"
    echo -e "${YELLOW}Added .env to .gitignore${NC}"
fi

echo -e "${GREEN}Configuration saved to $ENV_FILE${NC}"
echo ""
echo "To apply these environment variables to systemd services, run:"
echo "  systemctl daemon-reload"
echo ""
echo "Then start the services that need API keys:"
echo "  systemctl start mcp@github-personal"
echo "  systemctl start mcp@github-work"
echo "  systemctl start mcp@notion"
echo "  systemctl start mcp@atlassian"